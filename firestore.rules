rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ==========================================
    // HELPER FUNCTIONS
    // ==========================================

    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if user owns the document
    function isOwner(userUid) {
      return isAuthenticated() && request.auth.uid == userUid;
    }

    // Check if document belongs to authenticated user
    function belongsToUser() {
      return isAuthenticated() && resource.data.userUid == request.auth.uid;
    }

    // Check if new document will belong to authenticated user
    function willBelongToUser() {
      return isAuthenticated() && request.resource.data.userUid == request.auth.uid;
    }

    // ==========================================
    // TECHNICIANS COLLECTION
    // ==========================================

    match /technicians/{docId} {
      // PUBLIC READ: Anyone can read technicians (for booking page queries)
      // Note: Queries filter by isActive==true, so inactive technicians won't appear in results
      // We allow all reads to permit Firestore to evaluate where() clauses in queries
      allow read: if true;

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their own profile
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // SERVICE TYPES COLLECTION
    // ==========================================

    match /serviceTypes/{docId} {
      // PUBLIC READ: Anyone can read active service types (for booking page)
      // Allow reading if document is active OR if querying by userUid
      allow read: if resource.data.isActive == true;

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their service types
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // CLIENTS COLLECTION
    // ==========================================

    match /clients/{docId} {
      // PRIVATE: Only authenticated user can read their own clients
      allow read: if belongsToUser();

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their clients
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // JOBS COLLECTION
    // ==========================================

    match /jobs/{docId} {
      // PRIVATE: Only authenticated user can read their own jobs
      allow read: if belongsToUser();

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their jobs
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // QUOTES COLLECTION
    // ==========================================

    match /quotes/{docId} {
      // PRIVATE: Only authenticated user can read their own quotes
      allow read: if belongsToUser();

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their quotes
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // PAYMENTS COLLECTION
    // ==========================================

    match /payments/{docId} {
      // PRIVATE: Only authenticated user can read their own payments
      allow read: if belongsToUser();

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their payments
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // SLOT AVAILABILITY COLLECTION
    // ==========================================

    match /slotAvailability/{docId} {
      // PUBLIC READ: Anyone can read slot availability (for booking page)
      // This allows clients to see available time slots
      allow read: if true;

      // AUTHENTICATED WRITE: Only the owner can create/update/delete their slots
      allow create: if willBelongToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // BOOKING REQUESTS COLLECTION
    // ==========================================

    match /bookingRequests/{docId} {
      // PUBLIC CREATE: Anyone can create a booking request (from booking page)
      // This allows potential clients to request appointments
      allow create: if true;

      // PRIVATE READ/UPDATE/DELETE: Only the technician can read/manage their booking requests
      allow read: if belongsToUser();
      allow update: if belongsToUser();
      allow delete: if belongsToUser();
    }

    // ==========================================
    // DEFAULT DENY ALL OTHER COLLECTIONS
    // ==========================================

    // Any collection not explicitly allowed above is denied by default
  }
}
