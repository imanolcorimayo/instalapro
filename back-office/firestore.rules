rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(resource) {
      return isAuthenticated() && resource.data.userUid == request.auth.uid;
    }

    // Helper function to check if creating user owns the document
    function isCreatingOwner() {
      return isAuthenticated() && request.resource.data.userUid == request.auth.uid;
    }

    // Technicians collection - users can only access their own technician profile
    match /technicians/{technicianId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Clients collection - users can only access their own clients
    match /clients/{clientId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Jobs collection - users can only access their own jobs
    match /jobs/{jobId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Quotes collection - users can only access their own quotes
    match /quotes/{quoteId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Payments collection - users can only access their own payments
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Service Types collection - users can only access their own service types
    match /serviceTypes/{serviceTypeId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Slot Availability collection - users can only access their own slots
    match /slotAvailability/{slotId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Booking Requests collection - users can only access their own bookings
    match /bookingRequests/{bookingId} {
      allow read: if isAuthenticated() && isOwner(resource);
      allow create: if isCreatingOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
